import { HttpContextToken, HttpInterceptorFn, HttpRequest, HttpHandlerFn, HttpErrorResponse } from '@angular/common/http';
import { inject } from '@angular/core';
import { AuthService } from '../services/auth.service';
import { Router } from '@angular/router';
import { ToastService } from '../services/toast.service';
import { catchError, throwError } from 'rxjs';

/**
 * Token que permite especificar si una solicitud debe omitir la autenticaci√≥n.
 *
 * @example
 * const httpRequest = req.context.get(SkipAuth);
 */
export const SkipAuth = new HttpContextToken<boolean>(() => false);

/**
 * Interceptor que maneja la autenticaci√≥n para las solicitudes HTTP en la aplicaci√≥n.
 *
 * Este interceptor revisa si existe un token de autenticaci√≥n antes de cada solicitud. Si la solicitud requiere autenticaci√≥n y no tiene un token v√°lido,
 * el interceptor redirige al usuario al login. Adem√°s, permite omitir la autenticaci√≥n en ciertas rutas especificadas.
 *
 * @param req La solicitud HTTP.
 * @param next La funci√≥n que maneja la siguiente acci√≥n en el pipeline HTTP.
 * @returns La solicitud procesada con el token de autenticaci√≥n, o la solicitud sin modificar si se omite la autenticaci√≥n.
 *
 * @example
 * authInterceptor(req, next);
 */
export const authInterceptor: HttpInterceptorFn = (req: HttpRequest<any>, next: HttpHandlerFn) => {
  // Inyecci√≥n de dependencias
  const authService = inject(AuthService); // Servicio de autenticaci√≥n
  const router = inject(Router); // Servicio de navegaci√≥n
  const toastService = inject(ToastService); // Servicio de notificaciones
  const token = authService.getToken(); // Obtenci√≥n del token de autenticaci√≥n

  console.log('Interceptando:', req.url);

  // Verificar si la ruta actual debe omitir la autenticaci√≥n
  if (req.url.endsWith('/logaccount') || req.url.endsWith('/send-verification-email') || req.url.includes('/verify') || req.context.get(SkipAuth)) {
    console.log('‚è© Saltando autenticaci√≥n:', req.url);
    return next(req); // Continuar sin modificar la solicitud
  }

  // Si no hay token, redirigir al login
  if (!token) {
    console.warn('üî¥ No hay token, redirigiendo a login...');
    toastService.showMessage('error', 'Sesi√≥n Expirada', 'Tu sesi√≥n ha caducado. Inicia sesi√≥n nuevamente.');

    // Cerrar sesi√≥n y redirigir
    authService.logout();
    router.navigate(['/logaccount']).then(() => {});

    return next(req); // Continuar sin modificar la solicitud
  }

  // Clonar la solicitud e incluir el token en los encabezados
  const authReq = req.clone({ setHeaders: { Authorization: `Bearer ${token}` } });

  return next(authReq).pipe(
    catchError((error: HttpErrorResponse) => {
      // Manejo de errores relacionados con la autenticaci√≥n
      if (error.status === 401 || error.status === 403) {
        console.error('üö® Token inv√°lido o expirado, cerrando sesi√≥n...');
        toastService.showMessage('error', 'Acceso Denegado', 'Tu sesi√≥n ha expirado o no tienes permisos.');

        // Cerrar sesi√≥n y redirigir
        authService.logout();
        router.navigate(['/logaccount']);
      }
      return throwError(() => error); // Propagar el error
    })
  );
};
